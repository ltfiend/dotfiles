/*
Copyright 2019 @foostan
Copyright 2020 Drashna Jaelre <@drashna>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include QMK_KEYBOARD_H
#include <stdio.h>

#ifdef PIMORONI_TRACKBALL_ENABLE
#include "drivers/sensors/pimoroni_trackball.h"
#include "pointing_device.h"
#endif

enum custom_keycodes {
    BTAB,
    BBTAB,
    BPAGE,
    BBPAGE,
    TMUXU,
    TMUXD,
    TMUXL,
    TMUXR,
    TMUXZ,
    TMUXNEW,
    TMUXLOG,
    TMUXPAS,
    TMUXMNU,
    TMUXSPL,
    TMUXVSP,
    TMUXMVU,
    TMUXMVD,
    TMUXLST,
    TMUXTIT,
    TMUXCMD,
    TMUXRL,
    TMUXRR,
    TMUXRU,
    TMUXRD,
    TMUX0,
    TMUX1,
    TMUX2,
    TMUX3,
    TMUX4,
    TMUX5,
    TMUX6,
    TMUX7,
    TMUX8,
    TMUX9,
    TMUXNXT,
    TMUXPRV,
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {                                     
  [0] = LAYOUT_split_3x6_3(
  //,-----------------------------------------------------.                    ,-----------------------------------------------------.
       KC_ESC,    KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,                         KC_Y,    KC_U,    KC_I,    KC_O,   KC_P,  KC_BSPC,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      KC_LSFT,    KC_A,    KC_S,    KC_D,    KC_F,    KC_G,                         KC_H,    KC_J,    KC_K,    KC_L, KC_SCLN, KC_QUOT,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      KC_LCTL,    KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,                         KC_N,    KC_M, KC_COMM,  KC_DOT, KC_SLSH, KC_BSLS,
  //|--------+--------+--------+--------+--------+--------+--------|  |--------+--------+--------+--------+--------+--------+--------|
                                            MO(2),   MO(1), KC_LGUI,     KC_SPC,  KC_ENT, _______
                                      //`--------------------------'  `--------------------------'

  ),

  [1] = LAYOUT_split_3x6_3(
  //,-----------------------------------------------------.                    ,-----------------------------------------------------.
       KC_TAB,    KC_1,    KC_2,    KC_3,    KC_4,    KC_5,                         KC_6,    KC_7,    KC_8,    KC_9,    KC_0, KC_BSPC,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      _______, _______, _______, _______, _______, _______,                      KC_LEFT, KC_DOWN,   KC_UP,KC_RIGHT, _______, KC_MINS,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      _______, _______, _______, _______, _______, _______,                      _______, KC_PGDN, _______, _______, KC_TILD, _______,
  //|--------+--------+--------+--------+--------+--------+--------|  |--------+--------+--------+--------+--------+--------+--------|
                                          MO(3)  , _______,_______ ,     KC_SPC,  KC_ENT, KC_BSPC
                                      //`--------------------------'  `--------------------------'
  ),

  [2] = LAYOUT_split_3x6_3(
  //,-----------------------------------------------------.                    ,-----------------------------------------------------.
      _______, _______, _______, _______, _______, KC_LBRC,                      KC_RBRC, _______, _______, _______, _______, _______,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      KC_LSFT, _______, _______, _______, _______, KC_LPRN,                      KC_RPRN,  KC_EQL, KC_LBRC, KC_RBRC, KC_BSLS,  KC_GRV,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      KC_LCTL, _______, _______, _______, _______, KC_LCBR,                      KC_RCBR, KC_PLUS, KC_LCBR, KC_RCBR, KC_PIPE, KC_TILD,
  //|--------+--------+--------+--------+--------+--------+--------|  |--------+--------+--------+--------+--------+--------+--------|
                                          _______,   MO(3), _______,    _______, _______, _______
                                      //`--------------------------'  `--------------------------'
  ),

  [3] = LAYOUT_split_3x6_3(
  //,-----------------------------------------------------.                    ,-----------------------------------------------------.
      KC_F1  ,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,                        KC_F7,   KC_F8,   KC_F9,  KC_F10,  KC_F11,  KC_F12,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      KC_LSFT, _______, _______, _______, _______, KC_LPRN,                      KC_RPRN,  KC_EQL, KC_LBRC, KC_RBRC, KC_BSLS,  KC_GRV,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      KC_LCTL, _______, _______, _______, _______, KC_LCBR,                      KC_RCBR, KC_PLUS, KC_LCBR, KC_RCBR, KC_PIPE, KC_TILD,
  //|--------+--------+--------+--------+--------+--------+--------|  |--------+--------+--------+--------+--------+--------+--------|
                                          KC_LGUI, _______,  KC_SPC,    _______, _______, _______
                                      //`--------------------------'  `--------------------------'
  ),

  [4] = LAYOUT_split_3x6_3(
  //,-----------------------------------------------------.                    ,-----------------------------------------------------.
      _______, _______, _______, _______, _______, KC_LBRC,                      KC_RBRC,   BBTAB, _______, _______, _______, _______,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      KC_LSFT, _______, _______, _______, _______, KC_LPRN,                      BBTAB  ,  KC_EQL, KC_LBRC, BTAB   , KC_BSLS,  KC_GRV,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      KC_LCTL, _______, _______, _______, _______, KC_LCBR,                      KC_RCBR, KC_PLUS, KC_LCBR, KC_RCBR, KC_PIPE, KC_TILD,
  //|--------+--------+--------+--------+--------+--------+--------|  |--------+--------+--------+--------+--------+--------+--------|
                                            MO(5), _______,  KC_SPC,    _______, _______, _______
                                      //`--------------------------'  `--------------------------'
  ),

  [5] = LAYOUT_split_3x6_3(
  //,-----------------------------------------------------.                    ,-----------------------------------------------------.
        TMUX0,   TMUX1,   TMUX2,   TMUX3,   TMUX4,   TMUX5,                       TMUXRL,  TMUXRD,  TMUXRU,  TMUXRR, TMUXPAS, TMUXLOG,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      _______, TMUXTIT, TMUXSPL, _______, _______, _______,                        TMUXL,   TMUXD,   TMUXU,   TMUXR, TMUXCMD, TMUXLST,
  //|--------+--------+--------+--------+--------+--------|                    |--------+--------+--------+--------+--------+--------|
      _______,   TMUXZ, _______, TMUXNEW, _______, _______,                      _______, _______, TMUXPRV, TMUXNXT, _______, TMUXVSP,
  //|--------+--------+--------+--------+--------+--------+--------|  |--------+--------+--------+--------+--------+--------+--------|
                                          _______, _______, _______,    _______, _______, _______
                                      //`--------------------------'  `--------------------------'
  )
};

#ifdef OLED_ENABLE
oled_rotation_t oled_init_user(oled_rotation_t rotation) {
  if (!is_keyboard_master()) {
    return OLED_ROTATION_180;  // flips the display 180 degrees if offhand
  }
  return rotation;
}

#define L_BASE 0
#define L_LOWER 2
#define L_RAISE 4
#define L_ADJUST 8

void oled_render_layer_state(void) {
    oled_write_P(PSTR("Layer: "), false);
    switch (layer_state) {
        case L_BASE:
            oled_write_ln_P(PSTR("Default"), false);
            break;
        case L_LOWER:
            oled_write_ln_P(PSTR("Lower"), false);
            break;
        case L_RAISE:
            oled_write_ln_P(PSTR("Raise"), false);
            break;
        case L_ADJUST:
        case L_ADJUST|L_LOWER:
        case L_ADJUST|L_RAISE:
        case L_ADJUST|L_LOWER|L_RAISE:
            oled_write_ln_P(PSTR("Adjust"), false);
            break;
    }
}

char keylog_str[24] = {};

const char code_to_name[60] = {
    ' ', ' ', ' ', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
    'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
    'R', 'E', 'B', 'T', '_', '-', '=', '[', ']', '\\',
    '#', ';', '\'', '`', ',', '.', '/', ' ', ' ', ' '};

void set_keylog(uint16_t keycode, keyrecord_t *record) {
  char name = ' ';
    if ((keycode >= QK_MOD_TAP && keycode <= QK_MOD_TAP_MAX) ||
        (keycode >= QK_LAYER_TAP && keycode <= QK_LAYER_TAP_MAX)) { keycode = keycode & 0xFF; }
  if (keycode < 60) {
    name = code_to_name[keycode];
  }

  // update keylog
  snprintf(keylog_str, sizeof(keylog_str), "%dx%d, k%2d : %c",
           record->event.key.row, record->event.key.col,
           keycode, name);
}

void oled_render_keylog(void) {
    oled_write(keylog_str, false);
}

void render_bootmagic_status(bool status) {
    /* Show Ctrl-Gui Swap options */
    static const char PROGMEM logo[][2][3] = {
        {{0x97, 0x98, 0}, {0xb7, 0xb8, 0}},
        {{0x95, 0x96, 0}, {0xb5, 0xb6, 0}},
    };
    if (status) {
        oled_write_ln_P(logo[0][0], false);
        oled_write_ln_P(logo[0][1], false);
    } else {
        oled_write_ln_P(logo[1][0], false);
        oled_write_ln_P(logo[1][1], false);
    }
}

void oled_render_logo(void) {
    static const char PROGMEM crkbd_logo[] = {
        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94,
        0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4,
        0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4,
        0};
    oled_write_P(crkbd_logo, false);
}

bool oled_task_user(void) {
    if (is_keyboard_master()) {
        oled_render_layer_state();
        oled_render_keylog();
    } else {
        oled_render_logo();
    }

    return false;
}
#endif


void keyboard_post_init_user(void) {
#ifdef PIMORONI_TRACKBALL_ENABLE
    trackball_set_rgbw(0,0,0,80);
#endif
}


bool process_record_user(uint16_t keycode, keyrecord_t *record){
  #ifdef OLED_ENABLE
  if (record->event.pressed) {
     set_keylog(keycode, record);
  }
  #endif
  switch (keycode) {
  #ifdef PIMORONI_TRACKBALL_ENABLE
    case BALL_LC:
       record->event.pressed?register_code(KC_BTN1):unregister_code(KC_BTN1);
       break;
    case BALL_SCR:
      if(record->event.pressed){
        trackball_set_scrolling(true);
      } else{
        trackball_set_scrolling(false);
      }
      break;
  #endif
    case BTAB:
      if (record->event.pressed) {
          // when keycode is pressed
          register_code(KC_LCTL);
          register_code(KC_TAB);
          unregister_code(KC_LCTL);
          unregister_code(KC_TAB);
      } else {
          // when keycode is released
      }
      break;
    case BBTAB:
      if (record->event.pressed) {
          // when keycode is pressed
          register_code(KC_LCTL);
          register_code(KC_LSFT);
          register_code(KC_TAB);
          unregister_code(KC_LCTL);
          unregister_code(KC_LSFT);
          unregister_code(KC_TAB);
      } else {
          // when keycode is released
      }
      break;
    case BPAGE:
      if (record->event.pressed) {
          // when keycode is pressed
          register_code(KC_LALT);
          register_code(KC_LEFT);
          unregister_code(KC_LALT);
          unregister_code(KC_LEFT);
      } else {
          // when keycode is released
      }
      break;
    case BBPAGE:
      if (record->event.pressed) {
          // when keycode is pressed
          register_code(KC_LALT);
          register_code(KC_RGHT);
          unregister_code(KC_LALT);
          unregister_code(KC_RGHT);
      } else {
          // when keycode is released
      }
      break;
//    case TMUXL:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          register_code(KC_LEFT);
//          unregister_code(KC_LEFT);
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXR:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          register_code(KC_RGHT);
//          unregister_code(KC_RGHT);
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXU:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          register_code(KC_UP);
//          unregister_code(KC_UP);
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXD:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          register_code(KC_DOWN);
//          unregister_code(KC_DOWN);
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXZ:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("z");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXMNU:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("\"");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXLOG:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("[");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXPAS:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("]");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXSPL:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("S");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXVSP:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("|");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXMVU:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING(SS_LSFT("["));
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXMVD:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING(SS_LSFT("]"));
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXLST:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING(SS_LCTL("a"));
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXTIT:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("A");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXCMD:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING(":");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUX0:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("0");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUX1:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("1");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUX2:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("2");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUX3:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("3");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUX4:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("4");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUX5:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("5");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUX6:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("6");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUX7:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("7");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUX8:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("8");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUX9:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("9");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXNXT:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("n");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXPRV:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("p");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXNEW:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          SEND_STRING("c");
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXRL:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          register_code(KC_LALT);
//          register_code(KC_LEFT);
//          unregister_code(KC_LALT);
//          unregister_code(KC_LEFT);
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXRR:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          register_code(KC_LALT);
//          register_code(KC_RGHT);
//          unregister_code(KC_LALT);
//          unregister_code(KC_RGHT);
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXRU:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          register_code(KC_LALT);
//          register_code(KC_UP);
//          unregister_code(KC_LALT);
//          unregister_code(KC_UP);
//      } else {
//          // when keycode is released
//      }
//      break;
//    case TMUXRD:
//      if (record->event.pressed) {
//          // when keycode is pressed
//          SEND_STRING(SS_LCTL("a"));
//          register_code(KC_LALT);
//          register_code(KC_DOWN);
//          unregister_code(KC_LALT);
//          unregister_code(KC_DOWN);
//      } else {
//          // when keycode is released
//      }
//      break;
    }
    return true;
};

#ifdef PIMORONI_TRACKBALL_ENABLE
layer_state_t layer_state_set_user(layer_state_t state) {
    switch (get_highest_layer(state)) {
    case _BASE:
        trackball_set_rgbw(0,0,0,80);
        break;
    case _NAV:
        trackball_set_rgbw(0,153,95,0);
        break;
    case _SYM:
        trackball_set_rgbw(153,113,0,0);
        break;
    default: //  for any other layers, or the default layer
        trackball_set_rgbw(0,0,0,80);
        break;
    }
  return state;
}
#endif
